# -*- coding: utf-8 -*-
"""Data_quality_Check_and_Mapping

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RVsYicJlzuABZEtz4RsujQiG631j6Az1
"""

pip install ydata_profiling

#Import Libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from ydata_profiling import ProfileReport
import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv("/content/diabetes.csv" , sep = "," , encoding = 'utf-8')

print(df.shape)
print("----------------------------------------------------------------------------")
print("----------------------------------------------------------------------------")
print(df.head(2))  # Display the first few rows
print("----------------------------------------------------------------------------")
print("----------------------------------------------------------------------------")
print(df.info())  # Display data types and non-null counts
print("----------------------------------------------------------------------------")
print("----------------------------------------------------------------------------")
print(df.describe())  # Display summary statistics

columns_to_convert = [
    "Diabetes_012", "HighBP", "HighChol", "CholCheck", "BMI", "Smoker", "Stroke",
    "HeartDiseaseorAttack", "PhysActivity", "Fruits", "Veggies", "HvyAlcoholConsump",
    "AnyHealthcare", "NoDocbcCost", "GenHlth", "MentHlth", "PhysHlth", "DiffWalk",
    "Sex", "Age", "Education", "Income"
]

df[columns_to_convert] = df[columns_to_convert].astype(int)
df.info()

print(df.isnull().sum())  # Check for missing values
df.fillna(df.mean(), inplace=True)

unique_values = {}
for col in df.columns:
    unique_values[col] = df[col].value_counts().shape[0]

pd.DataFrame(unique_values, index=['unique value count']).transpose()

print(df.duplicated().sum())  # Check for duplicate rows
df.drop_duplicates(inplace=True)

profile = ProfileReport(df, title="Pandas Profiling Report")
profile.to_file("data_quality_report.html")

import matplotlib.pyplot as plt
import seaborn as sns

# Define the columns to plot
cols = ['BMI', 'GenHlth', 'MentHlth', 'PhysHlth', 'Age', 'Education', 'Income']

# Create box plots in a single figure
sns.catplot(data=df[cols].melt(), x="variable", y="value", kind="box", palette="Set2", height=6, aspect=2)

plt.xticks(rotation=45)  # Rotate labels for better visibility
plt.xlabel("Features")
plt.ylabel("Values")
plt.title("Boxplots of Selected Features")
plt.show()

corr_analysis = df.corr()

plt.figure(figsize=(15,8))
sns.heatmap(corr_analysis, annot=True, cmap='vlag')

preprocess_diabetes_data = df.copy()

# Define all mapping dictionaries in one dictionary
mapping_dicts = {
     'Diabetes_012': {
         0: 'No Diabetes', 1: 'Diabetes or Prediabetes', 2: 'Diabetes or Prediabetes'
     },
    'GenHlth': {
        5: 'Poor', 4: 'Fair', 3: 'Good',
        2: 'Very Good', 1: 'Excellent'
    },
    'Education': {
        1: 'Never Attended School',
        2: 'Elementary',
        3: 'Junior High School',
        4: 'Senior High School',
        5: 'Undergraduate Degree',
        6: 'Masters Degree'
    },
    'Income': {
        1: 'Less Than $10,000', 2: '$10,000 to $14,999',
        3: '$15,000 to $19,999 ', 4: '$20,000 to $ 24,999',
        5: '$25,000 to $ 34,999', 6: '$35,000 to $ $49,999 ',
        7: '$50,000 to $74,999', 8: '$75,000 or More'
    },
    'Sex': {0: 'Female', 1: 'Male'},
    'PhysActivity': {0: 'No', 1: 'Yes'},

     }


# Apply all mappings
for col, mapping in mapping_dicts.items():
    preprocess_diabetes_data[col] = preprocess_diabetes_data[col].map(mapping)
preprocess_diabetes_data

preprocess_diabetes_data

def map_age(value):
    if value == 1:
        return '18 to 24'
    elif value == 2:
        return '25 to 29'
    elif value == 3:
        return '30 to 34'
    elif value == 4:
        return '35 to 39'
    elif value == 5:
        return '40 to 44'
    elif value == 6:
        return '45 to 49'
    elif value == 7:
        return '50 to 54'
    elif value == 8:
        return '55 to 59'
    elif value == 9:
        return '60 to 64'
    elif value == 10:
        return '65 to 69'
    elif value == 11:
        return '70 to 74'
    elif value == 12:
        return '75 to 79'
    elif value == 13:
        return '80 or older'
    else:
        return 'Unknown'

preprocess_diabetes_data['Age'] = preprocess_diabetes_data['Age'].apply(map_age)
print(preprocess_diabetes_data)

